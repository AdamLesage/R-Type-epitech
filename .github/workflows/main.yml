name: Github Actions R-Type

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build_cross_platform:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential

  check_compilation:
    needs:
      - build_cross_platform
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build with make
        if: runner.os == 'Linux'
        run: |
          echo "$(whoami) ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$(whoami)
          sudo apt install libboost-all-dev
          sudo apt install libsfml-dev
          sudo apt install libconfig++-dev
          make
          if [[ ! -f r-type_client || ! -f r-type_server ]]; then
            echo "Build failed: Binaries not found!"
            exit 1
          fi
        timeout-minutes: 10

  release_mode_test_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Release Mode
        run: |
          sudo apt-get update && sudo apt-get install -y expect
          mkdir -p ~/workflow/R-Type-epitech
          cp -r . ~/workflow/R-Type-epitech
          cp release/linux_installer.sh ~/workflow/linux_installer.sh
          cd ~/workflow
          chmod +x linux_installer.sh
          echo "$(whoami) ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$(whoami)
          expect -c '
          spawn ./linux_installer.sh
          set timeout 1200
            expect {
            "Do you want to continue? (y/n)" {
              send "y\r"
              exp_continue
            }
            "You may be asked for your password to proceed with the installation." {
              exp_continue
            }
            "Do you want to continue? (y/n)" {
              send "y\r"
              exp_continue
            }
            "Do you want to continue? (y/n)" {
              send "y\r"
              exp_continue
            }
          }
          expect eof
          '
      - name: Verify Binaries in Release Mode
        run: |
          ls ~/workflow/R-Type-epitech/r-type_client
          ls ~/workflow/R-Type-epitech/r-type_server
        timeout-minutes: 180

  # release_mode_test_windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Setup Release Mode
  #       run: |
  #         Write-Host "Creating directories and copying files..."
  #         cp release/install.ps1 ../install.ps1
  #         cd ..
  #         Write-Host "Files copied successfully."

  #     - name: Run a simple PowerShell command
  #       shell: pwsh
  #       run: |
  #         Write-Host "Running a simple test command..."
  #         pwsh -Command "Write-Host 'PowerShell is working!'"
  #         Write-Host "Test command completed."

  #     - name: Run install.ps1
  #       shell: pwsh
  #       run: |
  #         Write-Host "Starting install.ps1 execution..."
  #         Set-ExecutionPolicy Bypass -Scope Process -Force
  #         cd ..
  #         ./install.ps1
  #         Write-Host "install.ps1 execution completed."
  #       timeout-minutes: 180

  create_linux_release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Delete existing tag
        run: |
          git tag -d epitech-linux-release || true
          git push origin --delete epitech-linux-release || true
      - name: Create Linux Archive
        run: |
          mkdir -p release_archive/R-Type-epitech
          rsync -av --exclude='release_archive' . release_archive/R-Type-epitech
          cp release_archive/R-Type-epitech/release/linux_installer.sh release_archive/linux_installer.sh
          cp release_archive/R-Type-epitech/documentation/LINUX_INSTALL.md release_archive/LINUX_INSTALL.md
          tar -czvf r-type_linux_release.tar.gz -C release_archive .
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: epitech-linux-release
          release_name: RType-Linux-Release
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: r-type_linux_release.tar.gz
          asset_name: r-type_linux_release.tar.gz
          asset_content_type: application/gzip

  create_windows_release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Delete existing tag
        run: |
          git tag -d epitech-windows-release || true
          git push origin --delete epitech-windows-release || true
      - name: Create Linux Archive
        run: |
          mkdir -p release_archive/R-Type-epitech
          rsync -av --exclude='release_archive' . release_archive/R-Type-epitech
          cp release_archive/R-Type-epitech/release/windows_installer.exe release_archive/windows_installer.exe
          cp release_archive/R-Type-epitech/release/install.ps1 release_archive/install.ps1
          cp release_archive/R-Type-epitech/documentation/WINDOWS_INSTALL.md release_archive/WINDOWS_INSTALL.md
          zip -r r-type_windows_release.zip release_archive/*
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: epitech-windows-release
          release_name: RType-Windows-Release
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: r-type_windows_release.zip
          asset_name: r-type_windows_release.zip
          asset_content_type: application/gzip

  push_to_mirror:
    needs:
      - release_mode_test_linux
      # - release_mode_test_windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Mirror repository for Linux
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ secrets.REPOSITORY_SSH }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
